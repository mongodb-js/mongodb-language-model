/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function literal(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    "class": function _class(expectation) {
      var escapedParts = "",
          i;

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
      }

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function any(expectation) {
      return "any character";
    },

    end: function end(expectation) {
      return "end of input";
    },

    other: function other(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function classEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i,
        j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},
      peg$startRuleFunctions = { query: peg$parsequery },
      peg$startRuleFunction = peg$parsequery,
      peg$c0 = function peg$c0(clauses) {
    return { pos: "expression", clauses: clauses !== null ? clauses : [] };
  },
      peg$c1 = function peg$c1(head, c) {
    return c;
  },
      peg$c2 = function peg$c2(head, tail) {
    return [head].concat(tail);
  },
      peg$c3 = function peg$c3(text_options) {
    return { pos: "text-clause", search: text_options.search };
  },
      peg$c4 = function peg$c4(search) {
    return { search: search };
  },
      peg$c5 = function peg$c5(value) {
    return { value: value };
  },
      peg$c6 = function peg$c6(operator, expressions) {
    return { pos: "expression-tree-clause", operator: operator, expressions: expressions };
  },
      peg$c7 = "$or",
      peg$c8 = peg$literalExpectation("$or", false),
      peg$c9 = "$nor",
      peg$c10 = peg$literalExpectation("$nor", false),
      peg$c11 = "$and",
      peg$c12 = peg$literalExpectation("$and", false),
      peg$c13 = function peg$c13(head, e) {
    return e;
  },
      peg$c14 = function peg$c14(expressions) {
    return expressions !== null ? expressions : [];
  },
      peg$c15 = function peg$c15(value) {
    return { pos: "where-clause", type: "string", value: value };
  },
      peg$c16 = function peg$c16(key, value) {
    return { pos: "leaf-clause", key: key, value: value };
  },
      peg$c17 = "$gte",
      peg$c18 = peg$literalExpectation("$gte", false),
      peg$c19 = "$gt",
      peg$c20 = peg$literalExpectation("$gt", false),
      peg$c21 = "$lte",
      peg$c22 = peg$literalExpectation("$lte", false),
      peg$c23 = "$lt",
      peg$c24 = peg$literalExpectation("$lt", false),
      peg$c25 = "$eq",
      peg$c26 = peg$literalExpectation("$eq", false),
      peg$c27 = "$ne",
      peg$c28 = peg$literalExpectation("$ne", false),
      peg$c29 = "$type",
      peg$c30 = peg$literalExpectation("$type", false),
      peg$c31 = "$size",
      peg$c32 = peg$literalExpectation("$size", false),
      peg$c33 = "$exists",
      peg$c34 = peg$literalExpectation("$exists", false),
      peg$c35 = "$bitsAllClear",
      peg$c36 = peg$literalExpectation("$bitsAllClear", false),
      peg$c37 = "$bitsAllSet",
      peg$c38 = peg$literalExpectation("$bitsAllSet", false),
      peg$c39 = "$bitsAnyClear",
      peg$c40 = peg$literalExpectation("$bitsAnyClear", false),
      peg$c41 = "$bitsAnySet",
      peg$c42 = peg$literalExpectation("$bitsAnySet", false),
      peg$c43 = "$in",
      peg$c44 = peg$literalExpectation("$in", false),
      peg$c45 = "$nin",
      peg$c46 = peg$literalExpectation("$nin", false),
      peg$c47 = "$all",
      peg$c48 = peg$literalExpectation("$all", false),
      peg$c49 = "$mod",
      peg$c50 = peg$literalExpectation("$mod", false),
      peg$c51 = "$not",
      peg$c52 = peg$literalExpectation("$not", false),
      peg$c53 = "$elemMatch",
      peg$c54 = peg$literalExpectation("$elemMatch", false),
      peg$c55 = function peg$c55(operators) {
    return { pos: "operator-expression", operators: operators !== null ? operators : [] };
  },
      peg$c56 = function peg$c56(head, o) {
    return o;
  },
      peg$c57 = function peg$c57(operator, value) {
    return { pos: "value-operator", operator: operator, value: value };
  },
      peg$c58 = function peg$c58(operator, values) {
    return { pos: "list-operator", operator: operator, values: values };
  },
      peg$c59 = function peg$c59(expression) {
    return { pos: "elemmatch-expression-operator", expression: expression };
  },
      peg$c60 = function peg$c60(operator, opobject) {
    return { pos: "operator-expression-operator", operator: operator, operators: opobject.operators };
  },
      peg$c61 = "$geoWithin",
      peg$c62 = peg$literalExpectation("$geoWithin", false),
      peg$c63 = function peg$c63(shape) {
    return { pos: "geo-within-operator", operator: "$geoWithin", shape: shape };
  },
      peg$c64 = "$geoIntersects",
      peg$c65 = peg$literalExpectation("$geoIntersects", false),
      peg$c66 = function peg$c66(geometry) {
    return { pos: "geo-intersects-operator", operator: "$geoIntersects", geometry: geometry };
  },
      peg$c67 = "$nearSphere",
      peg$c68 = peg$literalExpectation("$nearSphere", false),
      peg$c69 = "$near",
      peg$c70 = peg$literalExpectation("$near", false),
      peg$c71 = function peg$c71(near_operator, value) {
    return { pos: "near-operator", operator: near_operator, value: value };
  },
      peg$c72 = function peg$c72(operator, value) {
    return { pos: "distance-operator", operator: operator, value: value };
  },
      peg$c73 = "$minDistance",
      peg$c74 = peg$literalExpectation("$minDistance", false),
      peg$c75 = "$maxDistance",
      peg$c76 = peg$literalExpectation("$maxDistance", false),
      peg$c77 = "$geometry",
      peg$c78 = peg$literalExpectation("$geometry", false),
      peg$c79 = "type",
      peg$c80 = peg$literalExpectation("type", false),
      peg$c81 = function peg$c81(type) {
    return type;
  },
      peg$c82 = "coordinates",
      peg$c83 = peg$literalExpectation("coordinates", false),
      peg$c84 = function peg$c84(type, coordinates) {
    return coordinates;
  },
      peg$c85 = function peg$c85(type, coordinates) {
    return { "type": type, "coordinates": coordinates };
  },
      peg$c86 = function peg$c86(members) {
    return { "$geometry": members };
  },
      peg$c87 = "Point",
      peg$c88 = peg$literalExpectation("Point", false),
      peg$c89 = function peg$c89(geometry, operator, value) {
    return _defineProperty({}, operator, value);
  },
      peg$c90 = function peg$c90(geometry, distance) {
    return _extends({
      "$geometry": geometry
    }, distance ? distance : {});
  },
      peg$c91 = "Polygon",
      peg$c92 = peg$literalExpectation("Polygon", false),
      peg$c93 = "MultiPolygon",
      peg$c94 = peg$literalExpectation("MultiPolygon", false),
      peg$c95 = function peg$c95(head, v) {
    return v;
  },
      peg$c96 = "$centerSphere",
      peg$c97 = peg$literalExpectation("$centerSphere", false),
      peg$c98 = "$center",
      peg$c99 = peg$literalExpectation("$center", false),
      peg$c100 = function peg$c100(center_operator, parameters) {
    var res = {};
    res[center_operator] = JSON.parse(parameters);
    return res;
  },
      peg$c101 = "$box",
      peg$c102 = peg$literalExpectation("$box", false),
      peg$c103 = function peg$c103(parameters) {
    return { "$box": JSON.parse(parameters) };
  },
      peg$c104 = "$polygon",
      peg$c105 = peg$literalExpectation("$polygon", false),
      peg$c106 = function peg$c106(parameters) {
    return { "$polygon": JSON.parse(parameters) };
  },
      peg$c107 = "$where",
      peg$c108 = peg$literalExpectation("$where", false),
      peg$c109 = "$text",
      peg$c110 = peg$literalExpectation("$text", false),
      peg$c111 = "$search",
      peg$c112 = peg$literalExpectation("$search", false),
      peg$c113 = "$language",
      peg$c114 = peg$literalExpectation("$language", false),
      peg$c115 = "$caseSensitive",
      peg$c116 = peg$literalExpectation("$caseSensitive", false),
      peg$c117 = "$diacriticSensitive",
      peg$c118 = peg$literalExpectation("$diacriticSensitive", false),
      peg$c119 = function peg$c119(values) {
    return values !== null ? values : [];
  },
      peg$c120 = /^[^$]/,
      peg$c121 = peg$classExpectation(["$"], true, false),
      peg$c122 = /^[^\0"]/,
      peg$c123 = peg$classExpectation(["\0", "\""], true, false),
      peg$c124 = function peg$c124(key) {
    return key[0] + key[1].join('');
  },
      peg$c125 = function peg$c125(value) {
    return { pos: 'leaf-value', value: value };
  },
      peg$c126 = "[",
      peg$c127 = peg$literalExpectation("[", false),
      peg$c128 = "{",
      peg$c129 = peg$literalExpectation("{", false),
      peg$c130 = "]",
      peg$c131 = peg$literalExpectation("]", false),
      peg$c132 = "}",
      peg$c133 = peg$literalExpectation("}", false),
      peg$c134 = ":",
      peg$c135 = peg$literalExpectation(":", false),
      peg$c136 = ",",
      peg$c137 = peg$literalExpectation(",", false),
      peg$c138 = peg$otherExpectation("whitespace"),
      peg$c139 = /^[ \t\n\r]/,
      peg$c140 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
      peg$c141 = "false",
      peg$c142 = peg$literalExpectation("false", false),
      peg$c143 = function peg$c143() {
    return false;
  },
      peg$c144 = "null",
      peg$c145 = peg$literalExpectation("null", false),
      peg$c146 = function peg$c146() {
    return null;
  },
      peg$c147 = "true",
      peg$c148 = peg$literalExpectation("true", false),
      peg$c149 = function peg$c149() {
    return true;
  },
      peg$c150 = "$oid",
      peg$c151 = peg$literalExpectation("$oid", false),
      peg$c152 = function peg$c152(string) {
    return { "$oid": string };
  },
      peg$c153 = function peg$c153(digits) {
    return digits.join('');
  },
      peg$c154 = "$minKey",
      peg$c155 = peg$literalExpectation("$minKey", false),
      peg$c156 = "1",
      peg$c157 = peg$literalExpectation("1", false),
      peg$c158 = function peg$c158() {
    return { "$minKey": 1 };
  },
      peg$c159 = "$maxKey",
      peg$c160 = peg$literalExpectation("$maxKey", false),
      peg$c161 = function peg$c161() {
    return { "$maxKey": 1 };
  },
      peg$c162 = "$numberLong",
      peg$c163 = peg$literalExpectation("$numberLong", false),
      peg$c164 = function peg$c164(digits) {
    return { "$numberLong": digits.join('') };
  },
      peg$c165 = "$numberDecimal",
      peg$c166 = peg$literalExpectation("$numberDecimal", false),
      peg$c167 = function peg$c167(number) {
    return { "$numberDecimal": number };
  },
      peg$c168 = "$date",
      peg$c169 = peg$literalExpectation("$date", false),
      peg$c170 = function peg$c170(date) {
    return { "$date": date };
  },
      peg$c171 = function peg$c171(date) {
    return date;
  },
      peg$c172 = "$undefined",
      peg$c173 = peg$literalExpectation("$undefined", false),
      peg$c174 = function peg$c174() {
    return { "$undefined": true };
  },
      peg$c175 = "$ref",
      peg$c176 = peg$literalExpectation("$ref", false),
      peg$c177 = function peg$c177(string) {
    return string;
  },
      peg$c178 = "$id",
      peg$c179 = peg$literalExpectation("$id", false),
      peg$c180 = function peg$c180(ref, value) {
    return value;
  },
      peg$c181 = "$db",
      peg$c182 = peg$literalExpectation("$db", false),
      peg$c183 = function peg$c183(ref, id, string) {
    return string;
  },
      peg$c184 = function peg$c184(ref, id, db) {
    var result = { "$ref": ref, "$id": id };
    if (db !== null) result["$db"] = db;
    return result;
  },
      peg$c185 = function peg$c185(members) {
    return members;
  },
      peg$c186 = "$regex",
      peg$c187 = peg$literalExpectation("$regex", false),
      peg$c188 = "$options",
      peg$c189 = peg$literalExpectation("$options", false),
      peg$c190 = /^[gims]/,
      peg$c191 = peg$classExpectation(["g", "i", "m", "s"], false, false),
      peg$c192 = function peg$c192(regex, options) {
    return options.join('');
  },
      peg$c193 = function peg$c193(regex, options) {
    return { "$regex": regex, "$options": options ? options : "" };
  },
      peg$c194 = "$binary",
      peg$c195 = peg$literalExpectation("$binary", false),
      peg$c196 = function peg$c196(binary, type) {
    return type;
  },
      peg$c197 = function peg$c197(binary, type) {
    return { "$binary": binary, "$type": type };
  },
      peg$c198 = "$timestamp",
      peg$c199 = peg$literalExpectation("$timestamp", false),
      peg$c200 = "t",
      peg$c201 = peg$literalExpectation("t", false),
      peg$c202 = "i",
      peg$c203 = peg$literalExpectation("i", false),
      peg$c204 = function peg$c204(t, i) {
    return { "t": t, "i": i };
  },
      peg$c205 = function peg$c205(object) {
    return { "$timestamp": object };
  },
      peg$c206 = function peg$c206(head, m) {
    return m;
  },
      peg$c207 = function peg$c207(head, tail) {
    var result = {};
    [head].concat(tail).forEach(function (element) {
      result[element.name] = element.value;
    });
    return result;
  },
      peg$c208 = function peg$c208(members) {
    return members !== null ? members : {};
  },
      peg$c209 = function peg$c209(name, value) {
    return { name: name, value: value };
  },
      peg$c210 = peg$otherExpectation("number"),
      peg$c211 = function peg$c211() {
    return parseFloat(text());
  },
      peg$c212 = "180",
      peg$c213 = peg$literalExpectation("180", false),
      peg$c214 = /^[0-7]/,
      peg$c215 = peg$classExpectation([["0", "7"]], false, false),
      peg$c216 = "90",
      peg$c217 = peg$literalExpectation("90", false),
      peg$c218 = ".",
      peg$c219 = peg$literalExpectation(".", false),
      peg$c220 = /^[1-9]/,
      peg$c221 = peg$classExpectation([["1", "9"]], false, false),
      peg$c222 = /^[eE]/,
      peg$c223 = peg$classExpectation(["e", "E"], false, false),
      peg$c224 = "-",
      peg$c225 = peg$literalExpectation("-", false),
      peg$c226 = "+",
      peg$c227 = peg$literalExpectation("+", false),
      peg$c228 = "0",
      peg$c229 = peg$literalExpectation("0", false),
      peg$c230 = peg$otherExpectation("string"),
      peg$c231 = function peg$c231(chars) {
    return chars.join("");
  },
      peg$c232 = "\"",
      peg$c233 = peg$literalExpectation("\"", false),
      peg$c234 = "\\",
      peg$c235 = peg$literalExpectation("\\", false),
      peg$c236 = "/",
      peg$c237 = peg$literalExpectation("/", false),
      peg$c238 = "b",
      peg$c239 = peg$literalExpectation("b", false),
      peg$c240 = function peg$c240() {
    return "\b";
  },
      peg$c241 = "f",
      peg$c242 = peg$literalExpectation("f", false),
      peg$c243 = function peg$c243() {
    return "\f";
  },
      peg$c244 = "n",
      peg$c245 = peg$literalExpectation("n", false),
      peg$c246 = function peg$c246() {
    return "\n";
  },
      peg$c247 = "r",
      peg$c248 = peg$literalExpectation("r", false),
      peg$c249 = function peg$c249() {
    return "\r";
  },
      peg$c250 = function peg$c250() {
    return "\t";
  },
      peg$c251 = "u",
      peg$c252 = peg$literalExpectation("u", false),
      peg$c253 = function peg$c253(digits) {
    return String.fromCharCode(parseInt(digits, 16));
  },
      peg$c254 = function peg$c254(sequence) {
    return sequence;
  },
      peg$c255 = /^[^\0-\x1F"\\]/,
      peg$c256 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false),
      peg$c257 = /^[0-9]/,
      peg$c258 = peg$classExpectation([["0", "9"]], false, false),
      peg$c259 = /^[0-9a-f]/i,
      peg$c260 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
      peg$c261 = "--",
      peg$c262 = peg$literalExpectation("--", false),
      peg$c263 = "W",
      peg$c264 = peg$literalExpectation("W", false),
      peg$c265 = "---",
      peg$c266 = peg$literalExpectation("---", false),
      peg$c267 = "Z",
      peg$c268 = peg$literalExpectation("Z", false),
      peg$c269 = "T",
      peg$c270 = peg$literalExpectation("T", false),
      peg$c271 = "S",
      peg$c272 = peg$literalExpectation("S", false),
      peg$c273 = "M",
      peg$c274 = peg$literalExpectation("M", false),
      peg$c275 = "H",
      peg$c276 = peg$literalExpectation("H", false),
      peg$c277 = "D",
      peg$c278 = peg$literalExpectation("D", false),
      peg$c279 = "Y",
      peg$c280 = peg$literalExpectation("Y", false),
      peg$c281 = "P",
      peg$c282 = peg$literalExpectation("P", false),
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{ line: 1, column: 1 }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
        p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
  }

  function peg$parsequery() {
    var s0;

    s0 = peg$parseexpression();

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseclause_list();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclause_list() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseclause();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsevalue_separator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseclause();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c1(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsevalue_separator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseclause();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c1(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parseclause() {
    var s0;

    s0 = peg$parseleaf_clause();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpression_tree_clause();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewhere_clause();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetext_clause();
        }
      }
    }

    return s0;
  }

  function peg$parsetext_clause() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetext_operator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename_separator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetext_options();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetext_options() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesearch_operator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestring();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsevalue_separator();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetext_options_optional();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseend_object();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetext_options_value() {
    var s0;

    s0 = peg$parsestring();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetrue();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse();
      }
    }

    return s0;
  }

  function peg$parsetext_options_optional() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parsequotation_mark();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsetext_optional_operator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsequotation_mark();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsename_separator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetext_options_value();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c5(s6);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetext_optional_operator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetext_options_value();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c5(s6);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexpression_tree_clause() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpression_tree_operator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename_separator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebegin_array();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpression_list();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_array();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c6(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpression_tree_operator() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c7) {
      s0 = peg$c7;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c8);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c9) {
        s0 = peg$c9;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c11) {
          s0 = peg$c11;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c12);
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexpression_list() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseexpression();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parsevalue_separator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseexpression();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c13(s2, s6);
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parsevalue_separator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseexpression();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c13(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c2(s2, s3);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsewhere_clause() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhere_operator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename_separator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestring();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseleaf_clause() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsename_separator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0;

    s0 = peg$parseoperator_expression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseJSON();
    }

    return s0;
  }

  function peg$parsevalue_operator() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c18);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c19) {
        s0 = peg$c19;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c20);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c21) {
          s0 = peg$c21;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c22);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c23) {
            s0 = peg$c23;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c24);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c25) {
              s0 = peg$c25;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c26);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c27) {
                s0 = peg$c27;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c28);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c29) {
                  s0 = peg$c29;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c31) {
                    s0 = peg$c31;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c32);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c33) {
                      s0 = peg$c33;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c34);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 13) === peg$c35) {
                        s0 = peg$c35;
                        peg$currPos += 13;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c36);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 11) === peg$c37) {
                          s0 = peg$c37;
                          peg$currPos += 11;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c38);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 13) === peg$c39) {
                            s0 = peg$c39;
                            peg$currPos += 13;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c40);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 11) === peg$c41) {
                              s0 = peg$c41;
                              peg$currPos += 11;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c42);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselist_operator() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c43) {
      s0 = peg$c43;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c44);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c45) {
        s0 = peg$c45;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c46);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c47) {
          s0 = peg$c47;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c48);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c49) {
            s0 = peg$c49;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c50);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseoperator_expression_operator() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c51) {
      s0 = peg$c51;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c52);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c53) {
        s0 = peg$c53;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c54);
        }
      }
    }

    return s0;
  }

  function peg$parseoperator_expression() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoperator_list();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c55(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperator_list() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseoperator();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsevalue_separator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseoperator();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c56(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsevalue_separator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseoperator();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c56(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperator() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalue_operator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename_separator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseJSON();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c57(s2, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequotation_mark();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselist_operator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotation_mark();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebegin_array();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseleaf_value_list();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend_array();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c58(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequotation_mark();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c53) {
            s2 = peg$c53;
            peg$currPos += 10;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c54);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsequotation_mark();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsename_separator();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpression();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c59(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsequotation_mark();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseoperator_expression_operator();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequotation_mark();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsename_separator();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseoperator_expression();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c60(s2, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsequotation_mark();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c61) {
                s2 = peg$c61;
                peg$currPos += 10;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c62);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsequotation_mark();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsename_separator();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseshape();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c63(s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsequotation_mark();
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 14) === peg$c64) {
                  s2 = peg$c64;
                  peg$currPos += 14;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c65);
                  }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsequotation_mark();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsename_separator();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsegeometry();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c66(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsequotation_mark();
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 11) === peg$c67) {
                    s2 = peg$c67;
                    peg$currPos += 11;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c68);
                    }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c69) {
                      s2 = peg$c69;
                      peg$currPos += 5;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c70);
                      }
                    }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsequotation_mark();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsename_separator();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsegeometry_point();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parselegacy_coordinates();
                        }
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c71(s2, s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsequotation_mark();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsedistance_operator();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsequotation_mark();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsename_separator();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsenumber_positive();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c72(s2, s5);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedistance_operator() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c73) {
      s0 = peg$c73;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c74);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c75) {
        s0 = peg$c75;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c76);
        }
      }
    }

    return s0;
  }

  function peg$parseshape() {
    var s0;

    s0 = peg$parsegeometry();
    if (s0 === peg$FAILED) {
      s0 = peg$parselegacy_shape();
    }

    return s0;
  }

  function peg$parsegeometry() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c77) {
          s3 = peg$c77;
          peg$currPos += 9;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c78);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebegin_object();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$currPos;
                s9 = peg$parsequotation_mark();
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c79) {
                    s10 = peg$c79;
                    peg$currPos += 4;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c80);
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsequotation_mark();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsename_separator();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsequotation_mark();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsegeometry_type();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsequotation_mark();
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s8;
                              s9 = peg$c81(s14);
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parsevalue_separator();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsequotation_mark();
                    if (s11 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 11) === peg$c82) {
                        s12 = peg$c82;
                        peg$currPos += 11;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c83);
                        }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsequotation_mark();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsename_separator();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsegeometry_coordinates();
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s9;
                              s10 = peg$c84(s8, s15);
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c85(s8, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseend_object();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseend_object();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c86(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegeometry_point() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c77) {
          s3 = peg$c77;
          peg$currPos += 9;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c78);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebegin_object();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$currPos;
                s9 = peg$parsequotation_mark();
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c79) {
                    s10 = peg$c79;
                    peg$currPos += 4;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c80);
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsequotation_mark();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsename_separator();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsequotation_mark();
                        if (s13 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c87) {
                            s14 = peg$c87;
                            peg$currPos += 5;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c88);
                            }
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsequotation_mark();
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s8;
                              s9 = peg$c81(s14);
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parsevalue_separator();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsequotation_mark();
                    if (s11 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 11) === peg$c82) {
                        s12 = peg$c82;
                        peg$currPos += 11;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c83);
                        }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsequotation_mark();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsename_separator();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parselegacy_coordinates();
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s9;
                              s10 = peg$c84(s8, s15);
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c85(s8, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseend_object();
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$currPos;
                    s11 = peg$parsevalue_separator();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsequotation_mark();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsedistance_operator();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsequotation_mark();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsename_separator();
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parsenumber_positive();
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s10;
                                s11 = peg$c89(s7, s13, s16);
                                s10 = s11;
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$currPos;
                      s11 = peg$parsevalue_separator();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsequotation_mark();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsedistance_operator();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsequotation_mark();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parsename_separator();
                              if (s15 !== peg$FAILED) {
                                s16 = peg$parsenumber_positive();
                                if (s16 !== peg$FAILED) {
                                  peg$savedPos = s10;
                                  s11 = peg$c89(s7, s13, s16);
                                  s10 = s11;
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseend_object();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c90(s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegeometry_type() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c91) {
      s0 = peg$c91;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c92);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c93) {
        s0 = peg$c93;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c94);
        }
      }
    }

    return s0;
  }

  function peg$parsegeometry_coordinates() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_array();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenumber();
      if (s3 === peg$FAILED) {
        s3 = peg$parsegeometry_coordinates();
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenumber();
          if (s7 === peg$FAILED) {
            s7 = peg$parsegeometry_coordinates();
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c95(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenumber();
            if (s7 === peg$FAILED) {
              s7 = peg$parsegeometry_coordinates();
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c95(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c2(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_array();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselegacy_coordinates() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsebegin_array();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber_longitude();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalue_separator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumber_latitude();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseend_array();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselegacy_shape() {
    var s0;

    s0 = peg$parsecenter_shape();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepolygon_shape();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebox_shape();
      }
    }

    return s0;
  }

  function peg$parsecenter_shape() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c96) {
          s3 = peg$c96;
          peg$currPos += 13;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c97);
          }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c98) {
            s3 = peg$c98;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c99);
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$currPos;
              s8 = peg$parsebegin_array();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsebegin_array();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsenumber();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsevalue_separator();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsenumber();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseend_array();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsevalue_separator();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsenumber();
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parseend_array();
                              if (s16 !== peg$FAILED) {
                                s8 = [s8, s9, s10, s11, s12, s13, s14, s15, s16];
                                s7 = s8;
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = input.substring(s6, peg$currPos);
              } else {
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c100(s3, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebox_shape() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c101) {
          s3 = peg$c101;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c102);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$currPos;
              s8 = peg$parsebegin_array();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsebegin_array();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsenumber();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsevalue_separator();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsenumber();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseend_array();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsevalue_separator();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsebegin_array();
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parsenumber();
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parsevalue_separator();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$parsenumber();
                                  if (s18 !== peg$FAILED) {
                                    s19 = peg$parseend_array();
                                    if (s19 !== peg$FAILED) {
                                      s20 = peg$parseend_array();
                                      if (s20 !== peg$FAILED) {
                                        s8 = [s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20];
                                        s7 = s8;
                                      } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s7;
                                      s7 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = input.substring(s6, peg$currPos);
              } else {
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c103(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepolygon_shape() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c104) {
          s3 = peg$c104;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c105);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$currPos;
              s8 = peg$parsebegin_array();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parsebegin_array();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsenumber();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsevalue_separator();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsenumber();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parseend_array();
                        if (s14 !== peg$FAILED) {
                          s10 = [s10, s11, s12, s13, s14];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$currPos;
                  s12 = peg$parsevalue_separator();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsebegin_array();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parsenumber();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parsevalue_separator();
                        if (s15 !== peg$FAILED) {
                          s16 = peg$parsenumber();
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parseend_array();
                            if (s17 !== peg$FAILED) {
                              s12 = [s12, s13, s14, s15, s16, s17];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$currPos;
                    s12 = peg$parsevalue_separator();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsebegin_array();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parsenumber();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parsevalue_separator();
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parsenumber();
                            if (s16 !== peg$FAILED) {
                              s17 = peg$parseend_array();
                              if (s17 !== peg$FAILED) {
                                s12 = [s12, s13, s14, s15, s16, s17];
                                s11 = s12;
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseend_array();
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c2(s9, s10);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = input.substring(s6, peg$currPos);
              } else {
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c106(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhere_operator() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c107) {
      s0 = peg$c107;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c108);
      }
    }

    return s0;
  }

  function peg$parsetext_operator() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c109) {
      s0 = peg$c109;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c110);
      }
    }

    return s0;
  }

  function peg$parsesearch_operator() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c111) {
      s0 = peg$c111;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c112);
      }
    }

    return s0;
  }

  function peg$parsetext_optional_operator() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c113) {
      s0 = peg$c113;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c114);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 14) === peg$c115) {
        s0 = peg$c115;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c116);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 19) === peg$c117) {
          s0 = peg$c117;
          peg$currPos += 19;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c118);
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecase_sensitive_operator() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c115) {
      s0 = peg$c115;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c116);
      }
    }

    return s0;
  }

  function peg$parsediacritic_sensitive_operator() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c117) {
      s0 = peg$c117;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c118);
      }
    }

    return s0;
  }

  function peg$parseleaf_value_list() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseJSON();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parsevalue_separator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseJSON();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c95(s2, s6);
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parsevalue_separator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseJSON();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c95(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c2(s2, s3);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c119(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsekey() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (peg$c120.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c121);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$c122.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c123);
          }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$c122.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c123);
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c124(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJSON() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseleaf_value();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c125(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_array() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c126;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c127);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_object() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c128;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c129);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_array() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c130;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c131);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend_object() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 125) {
        s2 = peg$c132;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c133);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsename_separator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c134;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c135);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue_separator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c136;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c137);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c139.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c140);
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c139.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c140);
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c138);
      }
    }

    return s0;
  }

  function peg$parseleaf_value() {
    var s0;

    s0 = peg$parsefalse();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenull();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobject();
          if (s0 === peg$FAILED) {
            s0 = peg$parsearray();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenumber();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestring();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseextended_json_value();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefalse() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c141) {
      s1 = peg$c141;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c142);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c143();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenull() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c144) {
      s1 = peg$c144;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c145);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c146();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetrue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c147) {
      s1 = peg$c147;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c148);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c149();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseextended_json_value() {
    var s0;

    s0 = peg$parseejson_regex();
    if (s0 === peg$FAILED) {
      s0 = peg$parseejson_objectid();
      if (s0 === peg$FAILED) {
        s0 = peg$parseejson_minkey();
        if (s0 === peg$FAILED) {
          s0 = peg$parseejson_maxkey();
          if (s0 === peg$FAILED) {
            s0 = peg$parseejson_long();
            if (s0 === peg$FAILED) {
              s0 = peg$parseejson_decimal();
              if (s0 === peg$FAILED) {
                s0 = peg$parseejson_date();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseejson_timestamp();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseejson_binary();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseejson_dbref();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseejson_undefined();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseejson_objectid() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c150) {
          s3 = peg$c150;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c151);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsequotation_mark();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsehexdig24();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsequotation_mark();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseend_object();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c152(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehexdig24() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseHEXDIG();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseHEXDIG();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseHEXDIG();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHEXDIG();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHEXDIG();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseHEXDIG();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseHEXDIG();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseHEXDIG();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseHEXDIG();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseHEXDIG();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseHEXDIG();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parseHEXDIG();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parseHEXDIG();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parseHEXDIG();
                              if (s15 !== peg$FAILED) {
                                s16 = peg$parseHEXDIG();
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parseHEXDIG();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parseHEXDIG();
                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parseHEXDIG();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parseHEXDIG();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parseHEXDIG();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parseHEXDIG();
                                            if (s22 !== peg$FAILED) {
                                              s23 = peg$parseHEXDIG();
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parseHEXDIG();
                                                if (s24 !== peg$FAILED) {
                                                  s25 = peg$parseHEXDIG();
                                                  if (s25 !== peg$FAILED) {
                                                    s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25];
                                                    s1 = s2;
                                                  } else {
                                                    peg$currPos = s1;
                                                    s1 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s1;
                                                  s1 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s1;
                                                s1 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s1;
                                              s1 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s1;
                                            s1 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s1;
                                          s1 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s1;
                                      s1 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s1;
                              s1 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c153(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseejson_minkey() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c154) {
          s3 = peg$c154;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c155);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 49) {
                s6 = peg$c156;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c157);
                }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c147) {
                  s6 = peg$c147;
                  peg$currPos += 4;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c148);
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c158();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_maxkey() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c159) {
          s3 = peg$c159;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c160);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 49) {
                s6 = peg$c156;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c157);
                }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c147) {
                  s6 = peg$c147;
                  peg$currPos += 4;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c148);
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c161();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_long() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c162) {
          s3 = peg$c162;
          peg$currPos += 11;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c163);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsequotation_mark();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseplus();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseminus();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseDIGIT();
                  }
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseplus();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseminus();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseDIGIT();
                      }
                    }
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsequotation_mark();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseend_object();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c164(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_decimal() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14) === peg$c165) {
          s3 = peg$c165;
          peg$currPos += 14;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c166);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsequotation_mark();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenumber();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsequotation_mark();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c167(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_date() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c168) {
          s3 = peg$c168;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c169);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseejson_iso8601_date();
              if (s6 === peg$FAILED) {
                s6 = peg$parseejson_long();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c170(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_iso8601_date() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseiso_date_time();
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c171(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_undefined() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c172) {
          s3 = peg$c172;
          peg$currPos += 10;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c173);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c147) {
                s6 = peg$c147;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c148);
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c174();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_dbref() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parsequotation_mark();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c175) {
          s5 = peg$c175;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c176);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsequotation_mark();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsename_separator();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsestring();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c177(s8);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsevalue_separator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsequotation_mark();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c178) {
              s7 = peg$c178;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c179);
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsequotation_mark();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsename_separator();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseleaf_value();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c180(s3, s10);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsequotation_mark();
            if (s7 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c181) {
                s8 = peg$c181;
                peg$currPos += 3;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c182);
                }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsequotation_mark();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsename_separator();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsestring();
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c183(s3, s4, s11);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c184(s3, s4, s5);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c185(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_regex() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parsequotation_mark();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c186) {
          s5 = peg$c186;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c187);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsequotation_mark();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsename_separator();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsestring();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c177(s8);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsevalue_separator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsequotation_mark();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c188) {
              s7 = peg$c188;
              peg$currPos += 8;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c189);
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsequotation_mark();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsename_separator();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsequotation_mark();
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    if (peg$c190.test(input.charAt(peg$currPos))) {
                      s12 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c191);
                      }
                    }
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      if (peg$c190.test(input.charAt(peg$currPos))) {
                        s12 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c191);
                        }
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsequotation_mark();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s5 = peg$c192(s3, s11);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c193(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c185(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_binary() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parsequotation_mark();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c194) {
          s5 = peg$c194;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c195);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsequotation_mark();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsename_separator();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsestring();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c177(s8);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsevalue_separator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsequotation_mark();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c29) {
              s7 = peg$c29;
              peg$currPos += 5;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c30);
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsequotation_mark();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsename_separator();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsequotation_mark();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseHEXDIG();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsequotation_mark();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s5 = peg$c196(s3, s11);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c197(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c185(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseejson_timestamp() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequotation_mark();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c198) {
          s3 = peg$c198;
          peg$currPos += 10;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c199);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequotation_mark();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_separator();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsebegin_object();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsequotation_mark();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 116) {
                    s9 = peg$c200;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c201);
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsequotation_mark();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsename_separator();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsenumber();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsevalue_separator();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsequotation_mark();
                            if (s14 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 105) {
                                s15 = peg$c202;
                                peg$currPos++;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c203);
                                }
                              }
                              if (s15 !== peg$FAILED) {
                                s16 = peg$parsequotation_mark();
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parsename_separator();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parsenumber();
                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parseend_object();
                                      if (s19 !== peg$FAILED) {
                                        peg$savedPos = s6;
                                        s7 = peg$c204(s12, s18);
                                        s6 = s7;
                                      } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s6;
                                      s6 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_object();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c205(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseobject() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsemember();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsemember();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c206(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsemember();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c206(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c207(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c208(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemember() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsename_separator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseleaf_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c209(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearray() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_array();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseleaf_value();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseleaf_value();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c95(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseleaf_value();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c95(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c2(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_array();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c119(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearray_number() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebegin_array();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenumber();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c95(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenumber();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c95(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c2(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_array();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c119(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseint();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefrac();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexp();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c211();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c210);
      }
    }

    return s0;
  }

  function peg$parsenumber_positive() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefrac();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexp();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c211();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber_longitude() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c212) {
        s3 = peg$c212;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c213);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsedecimal_point();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsezero();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 49) {
          s4 = peg$c156;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c157);
          }
        }
        if (s4 !== peg$FAILED) {
          if (peg$c214.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c215);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseDIGIT();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsedigit1_9();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDIGIT();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseDIGIT();
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedecimal_point();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseint();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseint();
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 49) {
            s3 = peg$c156;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c157);
            }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c214.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c215);
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDIGIT();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsedigit1_9();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDIGIT();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$parseDIGIT();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber_latitude() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c216) {
        s3 = peg$c216;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c217);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsedecimal_point();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsezero();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parsedigit1_9();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDIGIT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseDIGIT();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedecimal_point();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseint();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseint();
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsedigit1_9();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDIGIT();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$parseDIGIT();
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecimal_point() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c218;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c219);
      }
    }

    return s0;
  }

  function peg$parsedigit1_9() {
    var s0;

    if (peg$c220.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c221);
      }
    }

    return s0;
  }

  function peg$parsee() {
    var s0;

    if (peg$c222.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c223);
      }
    }

    return s0;
  }

  function peg$parseexp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsee();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseminus();
      if (s2 === peg$FAILED) {
        s2 = peg$parseplus();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDIGIT();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDIGIT();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefrac() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedecimal_point();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3;

    s0 = peg$parsezero();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedigit1_9();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseminus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }

    return s0;
  }

  function peg$parseplus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c226;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c227);
      }
    }

    return s0;
  }

  function peg$parsezero() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c228;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c229);
      }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c231(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c230);
      }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$parseunescaped();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c232;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c233);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c234;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c235);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c236;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c237);
              }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s3 = peg$c238;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c239);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c240();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s3 = peg$c241;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c242);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c243();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c244;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c245);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c246();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c247;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c248);
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c249();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c200;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c201);
                        }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c250();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 117) {
                          s3 = peg$c251;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c252);
                          }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$currPos;
                          s6 = peg$parseHEXDIG();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseHEXDIG();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseHEXDIG();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseHEXDIG();
                                if (s9 !== peg$FAILED) {
                                  s6 = [s6, s7, s8, s9];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c253(s4);
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c254(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseescape() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c234;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c235);
      }
    }

    return s0;
  }

  function peg$parsequotation_mark() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c232;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c233);
      }
    }

    return s0;
  }

  function peg$parseunescaped() {
    var s0;

    if (peg$c255.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c256);
      }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$c257.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c258);
      }
    }

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    if (peg$c259.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c260);
      }
    }

    return s0;
  }

  function peg$parsedate_century() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedate_year() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDIGIT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedate_fullyear() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedate_century();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedate_year();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedate_month() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedate_mday() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedate_yday() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseDIGIT();
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedate_week() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedatepart_fullyear() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedate_century();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedate_year();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c224;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c225);
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatepart_ptyear() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c224;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s4 = peg$c224;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c225);
          }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatepart_wkyear() {
    var s0;

    s0 = peg$parsedatepart_ptyear();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedatepart_fullyear();
    }

    return s0;
  }

  function peg$parsedateopt_century() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsedate_century();
    }

    return s0;
  }

  function peg$parsedateopt_fullyear() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsedatepart_fullyear();
    }

    return s0;
  }

  function peg$parsedateopt_year() {
    var s0, s1, s2;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedate_year();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c224;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c225);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedateopt_month() {
    var s0, s1, s2;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedate_month();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c224;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c225);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedateopt_week() {
    var s0, s1, s2;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedate_week();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c224;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c225);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedatespec_full() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsedatepart_fullyear();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedate_month();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c224;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c225);
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedate_mday();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatespec_year() {
    var s0, s1, s2;

    s0 = peg$parsedate_century();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedateopt_century();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedate_year();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedatespec_month() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c224;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedateopt_year();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedate_month();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c224;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c225);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsedate_mday();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatespec_mday() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c261) {
      s1 = peg$c261;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c262);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedateopt_month();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedate_mday();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatespec_week() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsedatepart_wkyear();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 87) {
        s2 = peg$c263;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c264);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedate_week();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsedateopt_week();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDIGIT();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatespec_wday() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c265) {
      s1 = peg$c265;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c266);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatespec_yday() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedateopt_fullyear();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedate_yday();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedate() {
    var s0;

    s0 = peg$parsedatespec_full();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedatespec_year();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedatespec_month();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedatespec_mday();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedatespec_week();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedatespec_wday();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedatespec_yday();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetime_hour() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetime_minute() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetime_second() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetime_fraction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c136;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c137);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c218;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c219);
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseDIGIT();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetime_numoffset() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c226;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c227);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c224;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c225);
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetime_hour();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c134;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c135);
          }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetime_minute();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetime_zone() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 90) {
      s0 = peg$c267;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c268);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsetime_numoffset();
    }

    return s0;
  }

  function peg$parsetimeopt_hour() {
    var s0, s1, s2;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetime_hour();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c134;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c135);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetimeopt_minute() {
    var s0, s1, s2;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c224;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetime_minute();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c134;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c135);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetimespec_hour() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetime_hour();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c134;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c135);
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetime_minute();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s6 = peg$c134;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c135);
            }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetime_second();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimespec_minute() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetimeopt_hour();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetime_minute();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c134;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c135);
          }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetime_second();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimespec_second() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c224;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetimeopt_minute();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetime_second();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimespec_base() {
    var s0;

    s0 = peg$parsetimespec_hour();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetimespec_minute();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetimespec_second();
      }
    }

    return s0;
  }

  function peg$parsetime() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetimespec_base();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetime_fraction();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetime_zone();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiso_date_time() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedate();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 84) {
        s2 = peg$c269;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c270);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetime();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_second() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 83) {
        s2 = peg$c271;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c272);
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_minute() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 77) {
        s2 = peg$c273;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c274);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedur_second();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_hour() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 72) {
        s2 = peg$c275;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c276);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedur_minute();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_time() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 84) {
      s1 = peg$c269;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c270);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedur_hour();
      if (s2 === peg$FAILED) {
        s2 = peg$parsedur_minute();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedur_second();
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_day() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 68) {
        s2 = peg$c277;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c278);
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_week() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 87) {
        s2 = peg$c263;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c264);
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_month() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 77) {
        s2 = peg$c273;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c274);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedur_day();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_year() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 89) {
        s2 = peg$c279;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c280);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedur_month();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedur_date() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedur_day();
    if (s1 === peg$FAILED) {
      s1 = peg$parsedur_month();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedur_year();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedur_time();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseduration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 80) {
      s1 = peg$c281;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c282);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedur_date();
      if (s2 === peg$FAILED) {
        s2 = peg$parsedur_time();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedur_week();
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseperiod_explicit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseiso_date_time();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c236;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c237);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseiso_date_time();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseperiod_start() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseiso_date_time();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c236;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c237);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseduration();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseperiod_end() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseduration();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c236;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c237);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseiso_date_time();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseperiod() {
    var s0;

    s0 = peg$parseperiod_explicit();
    if (s0 === peg$FAILED) {
      s0 = peg$parseperiod_start();
      if (s0 === peg$FAILED) {
        s0 = peg$parseperiod_end();
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
